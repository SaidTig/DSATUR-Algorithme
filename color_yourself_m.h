//
// Generated file, do not edit! Created by nedtool 5.4 from color_yourself.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __COLOR_YOURSELF_M_H
#define __COLOR_YOURSELF_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>color_yourself.msg:16</tt> by nedtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * message Color_yourself
 * {
 *     int source;
 *     int destination;
 *     int degre;
 *     int color;
 *     int degreSat;
 *     int remain[];
 * }
 * </pre>
 */
class Color_yourself : public ::omnetpp::cMessage
{
  protected:
    int source;
    int destination;
    int degre;
    int color;
    int degreSat;
    int *remain; // array ptr
    unsigned int remain_arraysize;

  private:
    void copy(const Color_yourself& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Color_yourself&);

  public:
    Color_yourself(const char *name=nullptr, short kind=0);
    Color_yourself(const Color_yourself& other);
    virtual ~Color_yourself();
    Color_yourself& operator=(const Color_yourself& other);
    virtual Color_yourself *dup() const override {return new Color_yourself(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSource() const;
    virtual void setSource(int source);
    virtual int getDestination() const;
    virtual void setDestination(int destination);
    virtual int getDegre() const;
    virtual void setDegre(int degre);
    virtual int getColor() const;
    virtual void setColor(int color);
    virtual int getDegreSat() const;
    virtual void setDegreSat(int degreSat);
    virtual void setRemainArraySize(unsigned int size);
    virtual unsigned int getRemainArraySize() const;
    virtual int getRemain(unsigned int k) const;
    virtual void setRemain(unsigned int k, int remain);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Color_yourself& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Color_yourself& obj) {obj.parsimUnpack(b);}


#endif // ifndef __COLOR_YOURSELF_M_H

